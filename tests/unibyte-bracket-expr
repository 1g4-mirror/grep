#!/bin/sh

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ ../src

# Add "." to PATH for the use of get-mb-cur-max.
path_prepend_ .

# Exercise a DFA range bug that arises only with a unibyte encoding
# for which the wide-char-to-single-byte mapping is nontrivial.
# E.g., the regexp, [C] would fail to match C in a unibyte locale like
# ru_RU.KOI8-R for any C whose wide-char representation differed from
# its single-byte equivalent.

case $(get-mb-cur-max ru_RU.KOI8-R) in
  1)
    fail=0

    i=128
    while :; do
      in=in-$i
      octal=$(printf '%03o' $i)
      b=$(printf "\\$octal")
      echo "$b" > $in || framework_failure_
      LC_ALL=ru_RU.KOI8-R grep "[$b]" $in > out || fail=1
      compare out $in || fail=1

      test $i = 255 && break
      i=$(expr $i + 1)
    done;;
esac

# Exercise a DFA range bug where '[d-f]' did not match accented 'e' in a
# unibyte French locale.

for locale in fr_FR.iso88591 fr_FR.iso885915@euro fr_FR.ISO8859-1; do
  case $(get-mb-cur-max $locale) in
    1)
       printf '\351\n' | LC_ALL=$locale grep '[d-f]' || fail=1;;
  esac
done

Exit $fail
